#!/bin/sh

set -eu

# Delay in seconds. Note that by default systemd-logind allows a maximum sleep
# delay of 5 seconds.
sleep_delay=1

# housekeeping functions pre/post lock
housekeeping () {
	case $1 in
		pre)
			# mute?
			return
			;;
		post)
			return
			;;
	esac
}

main () {
	export DISPLAY=:0
	export XAUTHORITY=/home/ethan/.Xauthority

	SCRIPTNAME=$(basename $0)
	SCRIPTDIR=$(dirname $(readlink -f $0))

	# TODO: better way to grab username
	USERNAME=$(echo $SCRIPTDIR | sed "s_/home/\([^/]\+\).*_\1_")

	# make sure we have a properly owned cache file
	CACHE=/home/$USERNAME/.cache/$SCRIPTNAME
	[ -f $CACHE ] || { touch $CACHE; chown ${USERNAME}: $CACHE; }

	# main functions
	housekeeping pre
	cache_xrandr
	notifications stop
	lock_xscreensaver
	#lock_xscreensaver_new
	#lock_i3lock_old
	# xmonad_restart_if_display_change # mostly for xmobar/systray refresh
	xmonad_restart_always
	notifications start
	housekeeping post
}

notifications () {
	# notifications start|stop
	case ${1:-start} in
		stop) killall -SIGUSR1 dunst & ;;
		start) killall -SIGUSR2 dunst & ;;
	esac
}

xscreensaver_event_handler () {
	while read line
	do
		case "$line" in
			UNBLANK*)
				killall xscreensaver-command
				;;
		esac
	done
}

lock_xscreensaver () {
	# If xscreensaver isn't running, initialize the daemon and wait
	# for it to start up and respond to our queries.
        # Proceed to lock screen.
	if ! xscreensaver-command -time
	then
		xscreensaver -d $DISPLAY -no-splash -no-capture-stderr &
		count=0
		while true
		do
			((count+=1))
			((count>20)) && break
			xscreensaver-command -time && break
		done
	fi
	xscreensaver-command -lock #&& sleep 1
	xscreensaver-command -watch | xscreensaver_event_handler
}

lock_i3lock_new () {
	locker="i3lock -n"
	# kill locker if we get killed
	trap 'kill %%' TERM INT

	if [[ -e /dev/fd/${XSS_SLEEP_LOCK_FD:--1} ]]; then
	    # lock fd is open, make sure the locker does not inherit a copy
	    $locker {XSS_SLEEP_LOCK_FD}<&- &

	    sleep $sleep_delay

	    # now close our fd (only remaining copy) to indicate we're ready to sleep
	    exec {XSS_SLEEP_LOCK_FD}<&-
	else
	    $locker &
	fi
	wait # for locker to exit
}

# We set a trap to kill the locker if we get killed, then start the locker and
# wait for it to exit. The waiting is not that straightforward when the locker
# forks, so we use this polling only if we have a sleep lock to deal with.
lock_i3lock_old () {
	i3lock_options="-n"
	if [[ -e /dev/fd/${XSS_SLEEP_LOCK_FD:--1} ]]; then
	    kill_i3lock() {
		pkill -xu $EUID "$@" i3lock
	    }

	    trap kill_i3lock TERM INT

	    # we have to make sure the locker does not inherit a copy of the lock fd
	    i3lock $i3lock_options {XSS_SLEEP_LOCK_FD}<&-

	    # now close our fd (only remaining copy) to indicate we're ready to sleep
	    exec {XSS_SLEEP_LOCK_FD}<&-

	    while kill_i3lock -0; do
		sleep 0.5
	    done
	else
	    trap 'kill %%' TERM INT
	    i3lock $i3lock_options &
	    wait
	fi
}

cache_xrandr () {
	xrandr -q > $CACHE
}

xmonad_restart_if_display_change () {
	[ "$(cat $CACHE)" = "$(xrandr)" ] || xmonad --restart
}

xmonad_restart_always () {
	xmonad --restart
}

main

