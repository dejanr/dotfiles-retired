(in-package :stumpwm)

(setf *home-dir*      (make-pathname :directory (getenv "HOME"))
      *stump-dir*     (merge-pathnames (make-pathname :directory '(:relative ".stumpwm")) *home-dir*)
      *data-dir*      (merge-pathnames (make-pathname :directory '(:relative "storage")) *stump-dir*)
      *undo-data-dir* (make-pathname :directory "/dev/shm/.1009")
      *debug-file*    (merge-pathnames (make-pathname :name "debug") *stump-dir*)
      *scratchpad-group-name* ".scratch")

(load-module "mpd")
(load-module "window-tags")
(load-module "frame-tags")

;;-------~---~----------~----------~----
;; Define Variables
;;---~----~-~-------------~---------~---

;; Change welcome message
(setf *startup-message* nil)

;; Make run-or-raise act globally instead of current group
(setf *run-or-raise-all-groups* t)

;; Terminal
(defvar *terminal* "terminator" "Command to start a terminal.")

(defvar *terminal-smallfont* "urxvt -fn xft:Pragmata:size=7"
  "Command to start a terminal with small font.")

;;-------~---~----------~----------~----
;; Appearance
;;---~----~-~------ -------~---------~---

;; Font
(set-font "-*-terminus-medium-*-*-*-18-*-*-*-*-*-*-*")

;; Message Bar
(set-fg-color     "dimgray")
(set-bg-color     "gray10")
(set-border-color "gray10")

(setf *message-window-padding* 10
      *message-window-gravity* :center
      *input-window-gravity* :center)

;; Borders
(setf *maxsize-border-width*   0
      *transient-border-width* 2
      *normal-border-width*    1
      *window-border-style*    :thin)

(set-focus-color   "dimgray")
(set-unfocus-color "gray10")

;;-------~---~----------~----------~----
;; Keyboard & Mouse
;;---~----~-~-------------~---------~---

(set-prefix-key (kbd "C-t"))

;; Focus follows Mouse
(setq *mouse-focus-policy* :click)

;;-------~---~----------~----------~----
;; Startup
;;---~----~-~-------------~---------~---

(set-normal-gravity :center)
(set-frame-outline-width 1)
(set-msg-border-width 1)
(setf *mode-line-timeout* 1)
(setf *mode-line-position* :top)
(setf *run-or-raise-all-groups* nil)

;; create given groups while keeping focus on current.
(defmacro make-groups-bg (&rest names)
  (let ((ns (mapcar #'(lambda (n) (concatenate 'string "gnewbg " n)) names)))
    `(run-commands ,@ns)))

;; restore data from previous exit (state StumpWM was last using),
(clear-window-placement-rules)
(setf (group-name
        (first
          (screen-groups (current-screen)))) "main")
(make-groups-bg "web")
(if (probe-file (data-dir-file "desktop.lisp"))
  (restore-from-file (data-dir-file "desktop.lisp")))
;; (restore-window-placement-rules (data-dir-file "tile-rules.lisp"))
(cond ((string-equal (group-name (current-group)) *scratchpad-group-name*) (gother)))

;;-------~---~----------~----------~----
;; Load
;;---~----~-~-------------~---------~---

;;(setq *useless-gaps-size* 1)
;;(setq *useless-gaps-on* t)
;;
;;(load (merge-pathnames (make-pathname :name "gaps" :type "lisp"
;;                                      :directory '(:relative "vendor")) *stump-dir*))

(loop for file in '("alsavol"
                    "commands"
                    "functions"
                    "keymaps"
                    "mode-line"
                    "remember"
                    "websearch"
                    "window_rules")
      do (load (merge-pathnames (make-pathname :name file :type "lisp") *stump-dir*)))
